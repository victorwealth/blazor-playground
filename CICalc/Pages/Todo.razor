@page "/todo"
@inject IJSRuntime jsRuntime;

<section class="todoapp">
    <header class="header">
        <h1>Todo (@todos.Count(todo => !todo.IsDone))</h1>
        <input class="new-todo" id="new-todo" @onchange='async (e) => await jsRuntime.InvokeAsync<string>("getTodoValueFromJs", DotNetObjectReference.Create(this))' placeholder="What needs to be done?" autofocus>
    </header>
    <section class="main">
        <h2></h2>
        <input class="toggle-all" onclick="view.toggleAll();" type="checkbox">
        <label for="toggle-all">Mark all as complete</label>

        <ul class="todo-list">
            @foreach (var todo in todos)
            {
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-1 toggle"><input type="checkbox"  @bind="todo.IsDone" /></div>
                        <div class="col-4"><span class="">@todo.Title</span></div>
                    </div>
                </li>
            }
        </ul>

        <footer class="footer">
            <span class="todo-count"></span>
            <ul class="filters">
                <li>
                    <a href="#/" class="all">All</a>
                </li>
                <li>
                    <a href="#/active" class="active">Active</a>
                </li>
                <li>
                    <a href="#/completed" class="completed">Completed</a>
                </li>
            </ul>
            <button class="clear-completed">Clear completed</button>
        </footer>
        
    </section>
</section>


@code 
{
    private static IList<TodoItem> todos = new List<TodoItem>();

    [JSInvokable("invokeFromJS")]
    public Task AddTodo(string todo)
    {
        if (!string.IsNullOrWhiteSpace(todo))
        {
            todos.Add(new TodoItem { Title = todo });
        }
        StateHasChanged(); 
        return Task.CompletedTask;
    }

    
}